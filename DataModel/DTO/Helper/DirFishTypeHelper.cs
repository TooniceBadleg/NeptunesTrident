using EF;
using System.Linq;
//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.3.0.0 (entitiestodtos.codeplex.com).
//     Timestamp: 2017.04.03 - 18:57:14
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System.Text;
using System.Collections.Generic;
using System;

namespace DTO
{

    /// <summary>
    /// Assembler for <see cref="DirFishType"/> and <see cref="DirFishTypeDto"/>.
    /// </summary>
    public static partial class DirFishTypeHelper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="DirFishTypeDto"/> converted from <see cref="DirFishType"/>.</param>
        static partial void OnDTO(this DirFishType entity, DirFishTypeDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="DirFishType"/> converted from <see cref="DirFishTypeDto"/>.</param>
        static partial void OnEntity(this DirFishTypeDto dto, DirFishType entity);

        /// <summary>
        /// Converts this instance of <see cref="DirFishTypeDto"/> to an instance of <see cref="DirFishType"/>.
        /// </summary>
        /// <param name="dto"><see cref="DirFishTypeDto"/> to convert.</param>
        public static DirFishType ToEntity(this DirFishTypeDto dto)
        {
            if (dto == null) return null;

            var entity = new DirFishType();

            entity.Id = dto.Id;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="DirFishType"/> to an instance of <see cref="DirFishTypeDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="DirFishType"/> to convert.</param>
        public static DirFishTypeDto ToDTO(this DirFishType entity)
        {
            if (entity == null) return null;

            var dto = new DirFishTypeDto();

            dto.Id = entity.Id;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="DirFishTypeDto"/> to an instance of <see cref="DirFishType"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<DirFishType> ToEntities(this IEnumerable<DirFishTypeDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="DirFishType"/> to an instance of <see cref="DirFishTypeDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<DirFishTypeDto> ToDTOs(this IEnumerable<DirFishType> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}