using EF;
using System.Linq;
//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.3.0.0 (entitiestodtos.codeplex.com).
//     Timestamp: 2017.04.03 - 16:35:17
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System.Text;
using System.Collections.Generic;
using System;

namespace DTO
{

    /// <summary>
    /// Assembler for <see cref="AuditLogin"/> and <see cref="AuditLoginDto"/>.
    /// </summary>
    public static partial class AuditLoginHelper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AuditLoginDto"/> converted from <see cref="AuditLogin"/>.</param>
        static partial void OnDTO(this AuditLogin entity, AuditLoginDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="AuditLogin"/> converted from <see cref="AuditLoginDto"/>.</param>
        static partial void OnEntity(this AuditLoginDto dto, AuditLogin entity);

        /// <summary>
        /// Converts this instance of <see cref="AuditLoginDto"/> to an instance of <see cref="AuditLogin"/>.
        /// </summary>
        /// <param name="dto"><see cref="AuditLoginDto"/> to convert.</param>
        public static AuditLogin ToEntity(this AuditLoginDto dto)
        {
            if (dto == null) return null;

            var entity = new AuditLogin();

            entity.Id = dto.Id;
            entity.IdUser = dto.IdUser;
            entity.ApplicationCode = dto.ApplicationCode;
            entity.IpAddress = dto.IpAddress;
            entity.Hostname = dto.Hostname;
            entity.LogIn = dto.LogIn;
            entity.LogOut = dto.LogOut;
            entity.Repair = dto.Repair;
            entity.SystemDatetime = dto.SystemDatetime;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="AuditLogin"/> to an instance of <see cref="AuditLoginDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="AuditLogin"/> to convert.</param>
        public static AuditLoginDto ToDTO(this AuditLogin entity)
        {
            if (entity == null) return null;

            var dto = new AuditLoginDto();

            dto.Id = entity.Id;
            dto.IdUser = entity.IdUser;
            dto.ApplicationCode = entity.ApplicationCode;
            dto.IpAddress = entity.IpAddress;
            dto.Hostname = entity.Hostname;
            dto.LogIn = entity.LogIn;
            dto.LogOut = entity.LogOut;
            dto.Repair = entity.Repair;
            dto.SystemDatetime = entity.SystemDatetime;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AuditLoginDto"/> to an instance of <see cref="AuditLogin"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<AuditLogin> ToEntities(this IEnumerable<AuditLoginDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="AuditLogin"/> to an instance of <see cref="AuditLoginDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AuditLoginDto> ToDTOs(this IEnumerable<AuditLogin> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}