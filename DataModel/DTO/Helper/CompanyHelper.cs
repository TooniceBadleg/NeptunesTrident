using EF;
using System.Linq;
//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.3.0.0 (entitiestodtos.codeplex.com).
//     Timestamp: 2017.04.03 - 18:56:52
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System.Text;
using System.Collections.Generic;
using System;

namespace DTO
{

    /// <summary>
    /// Assembler for <see cref="Company"/> and <see cref="CompanyDto"/>.
    /// </summary>
    public static partial class CompanyHelper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="CompanyDto"/> converted from <see cref="Company"/>.</param>
        static partial void OnDTO(this Company entity, CompanyDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Company"/> converted from <see cref="CompanyDto"/>.</param>
        static partial void OnEntity(this CompanyDto dto, Company entity);

        /// <summary>
        /// Converts this instance of <see cref="CompanyDto"/> to an instance of <see cref="Company"/>.
        /// </summary>
        /// <param name="dto"><see cref="CompanyDto"/> to convert.</param>
        public static Company ToEntity(this CompanyDto dto)
        {
            if (dto == null) return null;

            var entity = new Company();

            entity.Id = dto.Id;
            entity.CompanyName = dto.CompanyName;
            entity.CompanyType = dto.CompanyType;
            entity.IdRegion = dto.IdRegion;
            entity.Address = dto.Address;
            entity.City = dto.City;
            entity.Country = dto.Country;
            entity.Email = dto.Email;
            entity.IdOwnerXX = dto.IdOwnerXX;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Company"/> to an instance of <see cref="CompanyDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="Company"/> to convert.</param>
        public static CompanyDto ToDTO(this Company entity)
        {
            if (entity == null) return null;

            var dto = new CompanyDto();

            dto.Id = entity.Id;
            dto.CompanyName = entity.CompanyName;
            dto.CompanyType = entity.CompanyType;
            dto.IdRegion = entity.IdRegion;
            dto.Address = entity.Address;
            dto.City = entity.City;
            dto.Country = entity.Country;
            dto.Email = entity.Email;
            dto.IdOwnerXX = entity.IdOwnerXX;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="CompanyDto"/> to an instance of <see cref="Company"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Company> ToEntities(this IEnumerable<CompanyDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Company"/> to an instance of <see cref="CompanyDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<CompanyDto> ToDTOs(this IEnumerable<Company> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}