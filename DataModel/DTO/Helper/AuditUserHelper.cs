using EF;
using System.Linq;
//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.3.0.0 (entitiestodtos.codeplex.com).
//     Timestamp: 2017.04.03 - 16:35:17
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System.Text;
using System.Collections.Generic;
using System;

namespace DTO
{

    /// <summary>
    /// Assembler for <see cref="AuditUser"/> and <see cref="AuditUserDto"/>.
    /// </summary>
    public static partial class AuditUserHelper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AuditUserDto"/> converted from <see cref="AuditUser"/>.</param>
        static partial void OnDTO(this AuditUser entity, AuditUserDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="AuditUser"/> converted from <see cref="AuditUserDto"/>.</param>
        static partial void OnEntity(this AuditUserDto dto, AuditUser entity);

        /// <summary>
        /// Converts this instance of <see cref="AuditUserDto"/> to an instance of <see cref="AuditUser"/>.
        /// </summary>
        /// <param name="dto"><see cref="AuditUserDto"/> to convert.</param>
        public static AuditUser ToEntity(this AuditUserDto dto)
        {
            if (dto == null) return null;

            var entity = new AuditUser();

            entity.Id = dto.Id;
            entity.IdUser = dto.IdUser;
            entity.ApplicationCode = dto.ApplicationCode;
            entity.Code = dto.Code;
            entity.Action = dto.Action;
            entity.Description = dto.Description;
            entity.SystemDatetime = dto.SystemDatetime;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="AuditUser"/> to an instance of <see cref="AuditUserDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="AuditUser"/> to convert.</param>
        public static AuditUserDto ToDTO(this AuditUser entity)
        {
            if (entity == null) return null;

            var dto = new AuditUserDto();

            dto.Id = entity.Id;
            dto.IdUser = entity.IdUser;
            dto.ApplicationCode = entity.ApplicationCode;
            dto.Code = entity.Code;
            dto.Action = entity.Action;
            dto.Description = entity.Description;
            dto.SystemDatetime = entity.SystemDatetime;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AuditUserDto"/> to an instance of <see cref="AuditUser"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<AuditUser> ToEntities(this IEnumerable<AuditUserDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="AuditUser"/> to an instance of <see cref="AuditUserDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AuditUserDto> ToDTOs(this IEnumerable<AuditUser> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}