using EF;
using System.Linq;
//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.3.0.0 (entitiestodtos.codeplex.com).
//     Timestamp: 2017.04.03 - 18:59:11
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System.Text;
using System.Collections.Generic;
using System;

namespace DTO
{

    /// <summary>
    /// Assembler for <see cref="Ship"/> and <see cref="ShipDto"/>.
    /// </summary>
    public static partial class ShipHelper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ShipDto"/> converted from <see cref="Ship"/>.</param>
        static partial void OnDTO(this Ship entity, ShipDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Ship"/> converted from <see cref="ShipDto"/>.</param>
        static partial void OnEntity(this ShipDto dto, Ship entity);

        /// <summary>
        /// Converts this instance of <see cref="ShipDto"/> to an instance of <see cref="Ship"/>.
        /// </summary>
        /// <param name="dto"><see cref="ShipDto"/> to convert.</param>
        public static Ship ToEntity(this ShipDto dto)
        {
            if (dto == null) return null;

            var entity = new Ship();

            entity.Id = dto.Id;
            entity.ShipName = dto.ShipName;
            entity.ShipRegistration = dto.ShipRegistration;
            entity.LengthFloat = dto.LengthFloat;
            entity.LengthReal = dto.LengthReal;
            entity.IdShipType = dto.IdShipType;
            entity.Capacity = dto.Capacity;
            entity.IdCompany = dto.IdCompany;
            entity.IdCaptain = dto.IdCaptain;
            entity.IdBasePort = dto.IdBasePort;
            entity.IdUnloadPort = dto.IdUnloadPort;
            entity.Active = dto.Active;
            entity.IdCreated = dto.IdCreated;
            entity.DateCreated = dto.DateCreated;
            entity.IdUpdated = dto.IdUpdated;
            entity.DateUpdated = dto.DateUpdated;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Ship"/> to an instance of <see cref="ShipDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="Ship"/> to convert.</param>
        public static ShipDto ToDTO(this Ship entity)
        {
            if (entity == null) return null;

            var dto = new ShipDto();

            dto.Id = entity.Id;
            dto.ShipName = entity.ShipName;
            dto.ShipRegistration = entity.ShipRegistration;
            dto.LengthFloat = entity.LengthFloat;
            dto.LengthReal = entity.LengthReal;
            dto.IdShipType = entity.IdShipType;
            dto.Capacity = entity.Capacity;
            dto.IdCompany = entity.IdCompany;
            dto.IdCaptain = entity.IdCaptain;
            dto.IdBasePort = entity.IdBasePort;
            dto.IdUnloadPort = entity.IdUnloadPort;
            dto.Active = entity.Active;
            dto.IdCreated = entity.IdCreated;
            dto.DateCreated = entity.DateCreated;
            dto.IdUpdated = entity.IdUpdated;
            dto.DateUpdated = entity.DateUpdated;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ShipDto"/> to an instance of <see cref="Ship"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Ship> ToEntities(this IEnumerable<ShipDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Ship"/> to an instance of <see cref="ShipDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ShipDto> ToDTOs(this IEnumerable<Ship> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}